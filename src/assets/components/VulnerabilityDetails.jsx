/**
 * VulnerabilityDetails Component
 * 
 * A comprehensive vulnerability management information display component.
 * Features:
 * - Interactive vulnerability type selection
 * - Dynamic content updates based on selection
 * - Animated content transitions
 * - Responsive layout with sidebar navigation
 * 
 * @component
 * @example
 * <VulnerabilityDetails />
 */

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import BtnSales from "./BtnSales";
import VulnerabilityOption from "./VulnerabilityOption";
import axios from 'axios';

export default function VulnerabilityDetails() {
  const [vulnerabilityInfo, setVulnerabilityInfo] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedTitle, setSelectedTitle] = useState("vulnerability");
  const [title, setTitle] = useState("Vulnerability Management");
  const [paragraphs, setParagraphs] = useState([]);
  const [options, setOptions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:3001/vulnerabilityInfo');
        setVulnerabilityInfo(response.data);
        // Set initial data from first item
        if (response.data.length > 0) {
          const firstItem = response.data[0];
          setTitle(firstItem.label + firstItem.restOfTitle);
          setParagraphs(firstItem.text);
          setOptions(firstItem.options);
        }
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch vulnerability data');
        setLoading(false);
        console.error('Error fetching data:', err);
      }
    };

    fetchData();
  }, []);

  const wrapperVariants = {
    hidden: { opacity: 0, y: "30%" },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 1,
        staggerChildren: 0.3,
      },
    },
  };

  const childVariants = {
    hidden: {
      opacity: 0,
    },
    visible: {
      opacity: 1,
    },
  };

  if (loading) return null;
  if (error) return null;
  if (!vulnerabilityInfo.length) return null;

  return (
    <>
      <section className="w-full pt-8">
        <div className="custom-container-sm pt-4">
          <motion.div
            variants={wrapperVariants}
            whileInView={wrapperVariants}
            initial="hidden"
            animate="visible"
            className="relative z-40 flex w-full flex-col gap-2 md:flex-row md:gap-10"
          >
            <div className="w-full md:w-1/3 md:pl-10">
              <div className="flex h-auto w-full flex-col pb-12 pt-12 md:border-r md:border-gray/15 md:pb-20 md:pt-14">
                {vulnerabilityInfo.map((title) => (
                  <div key={title.id}>
                    <h5
                      onClick={() => {
                        setSelectedTitle(title.id);
                        setTitle(title.label + title.restOfTitle);
                        setParagraphs(title.text);
                        setOptions(title.options);
                      }}
                      className={`text-gray font-medium tracking-xs text-sm md:text-base leading-base relative w-full p-5 md:border-b md:border-gray/15 cursor-pointer hover:text-white ${
                        selectedTitle === title.id ? "text-white" : ""
                      }`}
                    >
                      {title.label}
                    </h5>
                  </div>
                ))}
              </div>
            </div>
            <div className="flex w-full flex-col justify-center gap-6 p-4 md:w-2/3 md:p-12">
              <div className="text-white">
                <h5 className="text-xl font-semibold">{title}</h5>
              </div>
              <motion.div
                className="max-w-160 font-light tracking-xs text-sm md:text-base text-gray leading-6"
                variants={childVariants}
              >
                {paragraphs.map((paragraph, index) => (
                  <React.Fragment key={index}>
                    <p className="">{paragraph}</p>
                    {index < paragraphs.length - 1 && <br />}
                  </React.Fragment>
                ))}
              </motion.div>
              <div className="flex w-full flex-col items-start gap-6 md:flex-row">
                {options.map((option, index) => (
                  <VulnerabilityOption key={index} option={option} />
                ))}
              </div>
              <div className="">
                <BtnSales />
              </div>
            </div>
          </motion.div>
        </div>
      </section>
    </>
  );
}
